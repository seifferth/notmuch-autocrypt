#!/bin/sh

print_help() {
cat <<EOF
Usage: notmuch autocrypt COMMAND [COMMAND-ARGS]

Commands
    --locate-keys EMAIL...
            Search for autocrypt headers in recent messages from EMAIL.
            If such headers are found, the public keys stored in those
            headers will automatically be imported into the gpg keyring.
    --import-secret-key SETUP-MESSAGE [PASSPHRASE]
            Decrypt the setup message found in the file provided as
            the first argument and import the secret key into the gpg
            keyring. If no passphrase is provided, the user will be
            prompted interactively. Note that this command is not safe
            to run on a multi-user system as it invokes gpg with the
            '--passphrase' option under the hood.
    -h, --help
            Print this help message and exit.

EOF
}

locate_keys() {
    while test "$#" -gt 0; do
        notmuch search \
                --output=files \
                --sort=newest-first \
                --limit=100 \
                from:"$1" |
            xargs awk \
                'BEGIN { output=0 };
                 /^Autocrypt:/ { print; output=1; next };
                 output==1 && /^[ \t]/ { print };
                 output==1 && /^[^ \t]/ { exit };' |
            tr -d '\n \t' |
            grep "^Autocrypt:addr=$1;" |
            sed 's,^.*keydata=,,' |
            base64 -d |
            gpg --import
        shift
    done
}

import_secret_key() {
    if test "$#" = 2; then
        passphrase="$2"
    else
        read -p "Passphrase: " passphrase
    fi
    cat "$1" |
        gpg --batch --decrypt --passphrase "$passphrase" |
        gpg --import
}

case "$1" in
    --locate-keys)
        if test "$#" = 1; then
            echo "Missing argument EMAIL" >&2; exit 1
        fi
        shift; locate_keys "$@"; exit $?
        ;;
    --import-secret-key)
        if test "$#" -gt 3; then
            echo "Too many arguments" >&2; exit 1
        elif ! test -f "$2"; then
            echo "No such file '$2'" >&2; exit 1
        fi
        shift; import_secret_key "$@"; exit $?
        ;;
    -h|--help)
        print_help; exit 0
        ;;
    *)
        echo "Unknown command '$1'" >&2; exit 1
        ;;
esac
